// Code generated by go-bindata.
// sources:
// assets/css/main.css
// assets/js/main.js
// DO NOT EDIT!

package vegeta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6f\xd3\x40\x10\x85\xef\xfe\x15\x43\x73\x81\xaa\x9b\xda\x0d\x45\x68\xa3\xfe\x03\xb8\x20\x71\x42\x1c\xd6\xde\xb5\x3d\xaa\xbd\xb3\x9a\x1d\x93\x6d\x11\xff\x1d\xd9\xdd\x28\x29\x4d\x82\x64\x59\xf2\xcc\x7b\xe3\xef\xbd\x9a\xec\x13\xfc\x2e\x00\x6a\xd3\x3c\x76\x4c\x93\xb7\x1a\x56\xce\x39\x78\x87\x63\x20\x16\xe3\x65\x0b\x7f\x8a\x62\xbd\x63\x13\x82\xe3\x45\x3c\x1a\xee\xd0\x2b\xa1\xa0\xe1\x73\x19\xd2\xf6\x30\xab\x49\x84\xc6\x3c\x5e\x8c\x2d\xf1\xa8\x22\x76\x1e\x7d\x36\x27\xb5\x43\x2b\xbd\x86\xcd\xde\x1c\x8c\xb5\xe8\x3b\x0d\xd5\x7d\x48\xb0\x99\x5f\x1f\xef\x8f\xef\x6a\x28\xc1\x4c\x42\xdb\x57\xa8\xaa\xa1\x81\x58\xc3\xaa\x6d\xdb\x65\x43\x6c\x1d\x6b\xa8\x42\x82\x48\x03\x5a\xe0\xae\x36\xef\xcb\x1b\xc8\xcf\xba\xfa\x30\x43\x01\xbc\xa2\x3a\xfe\x50\xbd\x33\x33\xca\xcd\x1b\x51\xd3\xbb\xe6\xb1\xa6\xb4\x84\x78\x93\x77\x93\xf3\xfe\xc7\xd5\x92\x17\xb5\x73\xd8\xf5\xa2\xc1\x13\x8f\x66\x38\x0b\xd4\x90\x17\xa6\x21\x3b\x03\x45\x14\x24\xaf\x81\xdd\x60\x04\x7f\xb9\xed\xe1\x62\xc4\x67\xa7\xa1\xfa\xf4\x52\x19\x40\x9f\xff\xb0\xaf\xec\xb8\xe1\x72\x2f\xaa\x29\xcd\xc6\x65\xfa\xd2\x9c\xaa\x29\x87\xb8\x04\xa4\x5b\x6a\xa6\x98\xb1\x00\x9e\x15\x7a\xeb\x92\x86\xbb\x13\x49\xd0\x87\x49\x7e\xc8\x53\x70\x0f\x57\xe2\x92\x5c\xfd\x3c\x5d\x9f\xaa\x0e\x54\x99\x64\x5e\xa8\xc1\xb5\xa2\xd8\x58\x9c\xa2\x86\xf2\x94\x82\xe7\xa4\x47\x92\xcb\x0c\xc1\xc4\xb8\x23\xb6\xe7\x38\xee\xca\x7f\x38\x84\xc2\x25\x88\x79\x7d\x82\xa0\xb8\xbd\x5e\x41\xa4\x89\x1b\xf7\xd5\x84\x80\xbe\xfb\xfe\xed\xcb\xc3\x68\xd0\xaf\x9b\x18\xd7\xa3\x09\x70\x7d\x5b\xfc\x0d\x00\x00\xff\xff\x61\xea\xfa\x18\x7d\x03\x00\x00")

func assetsCssMainCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssMainCss,
		"assets/css/main.css",
	)
}

func assetsCssMainCss() (*asset, error) {
	bytes, err := assetsCssMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/main.css", size: 893, mode: os.FileMode(420), modTime: time.Unix(1506154369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x8f\x9b\x30\x10\xc5\xef\x7c\x8a\x91\xcb\xc1\x48\x05\x55\xca\xad\x34\x91\xfa\xef\x50\xa9\x87\xaa\x8d\xd4\xb3\x83\xc7\xe0\xd6\xd8\x15\xb6\x41\xb4\xe2\xbb\x57\x86\xf0\xa7\xdd\x24\xbb\xab\xdd\x03\xc8\x46\xcc\x6f\xde\x7b\x33\x31\xed\xa4\xe6\xa6\x4b\xb2\x06\xad\xfc\x8d\x54\x78\x5d\x38\x69\x34\x4d\xe0\x4f\x04\xd0\xb2\x06\x6a\xd3\x20\xec\x81\x9b\xc2\xd7\xa8\x5d\x56\xa2\xfb\xa8\x30\x1c\xdf\xf5\x9f\x38\x25\x3f\x6c\xaa\x59\x2b\x4b\x16\xea\xd2\xf0\x37\x49\xf2\x08\x40\x0a\xa0\x31\x0d\xf7\x24\x53\xa8\x4b\x57\xc1\x01\x5e\x4d\xdc\x89\x3c\xf5\xfe\x2e\xb9\xab\x60\x0f\xab\x96\x2e\x7c\xa1\x23\x64\x95\xf0\x19\x85\xfb\x26\x39\x1e\xcd\x17\x56\x2e\xb7\xb1\x6e\xea\x61\x84\xb0\xe8\x68\x68\x26\xdc\xad\xda\xaf\xb2\xac\xe6\xe2\xad\x84\xf4\x46\x9f\x3c\x1a\x81\xc1\xd3\x2d\xe0\x1b\xd8\xed\x16\x8b\x00\x31\x25\x2f\xee\xc6\x03\x99\xf5\xa7\x1a\xb5\x5f\x0e\x24\xe4\x5f\x9b\x16\xdf\x2b\x66\x2d\x25\x42\xf5\xa9\xf1\x2e\x6d\x02\x98\x9c\x83\x78\x14\x8e\x71\xfe\x1f\x2b\xa4\x32\xa3\x86\x87\xb9\x39\x3c\xaf\x9b\xad\x82\x27\x9a\xf9\x27\x98\x21\x0a\xcf\x90\xe4\x51\x14\xd3\x79\x4d\x83\x06\xc6\xfb\x8b\x0b\x8d\xda\x1f\x4d\x59\xaa\x69\x7b\x46\x19\xb5\x39\x49\x85\xe9\xb9\xa1\xd7\x27\xa9\xf9\xb4\x81\x17\x74\x5e\xf0\x68\x2b\xd3\x05\x3d\x11\x6c\xf0\x99\xd1\x94\x14\x4a\x16\x3f\xc9\x4b\x58\x84\xe0\x9c\x28\x66\xbf\x1a\x6c\x51\xbb\x0f\x28\x98\x57\x6e\xde\xf8\xab\x1d\xad\x1a\x87\x14\xd0\x1b\x5f\xf3\x78\xa4\xa0\x57\x2b\xa5\xa5\xe4\x75\x25\x39\x47\x4d\x92\x75\xa2\xf7\xba\x7b\xeb\x5c\x43\x89\x75\xbd\xc2\x75\x72\xc3\x94\xfa\x78\x0f\xef\x21\xc9\xe1\x6f\x00\x00\x00\xff\xff\xf7\x55\x42\x7a\x49\x04\x00\x00")

func assetsJsMainJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsMainJs,
		"assets/js/main.js",
	)
}

func assetsJsMainJs() (*asset, error) {
	bytes, err := assetsJsMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/main.js", size: 1097, mode: os.FileMode(420), modTime: time.Unix(1506153879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/main.css": assetsCssMainCss,
	"assets/js/main.js": assetsJsMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"main.css": &bintree{assetsCssMainCss, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"main.js": &bintree{assetsJsMainJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

