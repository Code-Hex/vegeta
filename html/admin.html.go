// Code generated by hero.
// source: /Users/codehex/Desktop/go/src/github.com/Code-Hex/vegeta/template/admin.html
// DO NOT EDIT!
package html

import (
	"io"

	"github.com/shiyanhui/hero"
)

func Admin(args AdminArgs, w io.Writer) {
	_buffer := hero.GetBuffer()
	defer hero.PutBuffer(_buffer)
	_buffer.WriteString(`<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="IoTを用いた栽培中の植物のデータを管理するプロジェクトです。">
  <link href="/assets/css/main.css" rel="stylesheet">
  <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
  <link rel="stylesheet" href="/assets/css/bootstrap.css">
  <script src="/assets/js/jquery.min.js"></script>
  <script src="/assets/js/tether.min.js"></script>
  <script src="/assets/js/bootstrap.min.js"></script>
  `)
	_buffer.WriteString(`
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css">
  <script src="/assets/js/main.js"></script>
`)

	_buffer.WriteString(`
  <title>`)
	_buffer.WriteString(`admin`)

	_buffer.WriteString(`</title>
</head>
<body class="d-flex flex-column" style="min-height: 100vh">
  <nav class="navbar navbar-toggleable-md navbar-expand-lg navbar-light static-top v-navbar">
    <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
      <i class="fa fa-bars"></i>
    </button>
    <a class="navbar-brand" href="/">Vegeta</a>
    <div id="navbarResponsive" class="collapse navbar-collapse">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item"><a class="nav-link" href="/contact">問い合わせ</a></li>
      </ul>
      <ul class="navbar-nav">
        `)
	if args.IsAuthed() {
		_buffer.WriteString(`
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle dropdown-toggle-split" href="" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-user" aria-hidden="true"></i> ユーザー</a>
            <div class="dropdown-menu">
              <a class="dropdown-item" href="/mypage"><i class="fa fa-pagelines" aria-hidden="true"></i> 観察</a>
              <div class="dropdown-divider"></div>
              <a class="dropdown-item" href="/mypage/settings"><i class="fa fa-cog" aria-hidden="true"></i> 設定</a>
              `)
		if args.IsAdmin() {
			_buffer.WriteString(`
                <a class="dropdown-item" href="/mypage/admin"><i class="fa fa-lock" aria-hidden="true"></i> ユーザー管理パネル</a>
              `)
		}
		_buffer.WriteString(`
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/mypage/logout"><i class="fa fa-sign-out" aria-hidden="true"></i> ログアウト</a>
          </li>
        `)
	} else {
		_buffer.WriteString(`
          <li class="nav-item">
            <a class="nav-link" href="/login"><i class="fa fa-sign-in" aria-hidden="true"></i> ログイン</a>
          </li>
        `)
	}
	_buffer.WriteString(`
      </ul>
    </div>
  </nav>
  <main class="mb-auto">
    `)
	adminArgs := args
	_buffer.WriteString(`
<input type="hidden" id="api-token" value="`)
	hero.EscapeHTML(adminArgs.Token(), _buffer)
	_buffer.WriteString(`">
<div class="admin-content">
  <div class="admin-wrapper">
    <div class="container-fluid">
      <div class="row">
          <div class="col col-sm-11 col-md-11 col-lg-11 text-right">
            <button type="button" class="btn btn-md btn-primary btn-create" class="btn btn-primary" data-toggle="modal" data-target="#createModal">ユーザー作成</button>
          </div>
        </div>
    </div>
  </div>
  <div class="container">
    <table id="admin" class="table table-striped table-bordered" cellspacing="0" width="100%">
      <thead>
        <tr>
          <th>ID</th>
          <th>ユーザー名</th>
          <th>管理者</th>
          <th>アクション</th>
        </tr>
      </thead>
      <tbody>
        `)
	for _, user := range adminArgs.Users() {
		if user.ID > 1 {
			_buffer.WriteString(`
          <tr>
            <td>`)
			hero.FormatUint(uint64(user.ID), _buffer)
			_buffer.WriteString(`</td>
            <td>`)
			hero.EscapeHTML(user.Name, _buffer)
			_buffer.WriteString(`</td>
            <td>`)
			hero.FormatBool(user.Admin, _buffer)
			_buffer.WriteString(`</td>
            <td align="center">
              <button type="button" class="btn btn-info" data-toggle="modal" data-target="#editModal" data-id="`)
			hero.FormatUint(uint64(user.ID), _buffer)
			_buffer.WriteString(`" data-name="`)
			hero.EscapeHTML(user.Name, _buffer)
			_buffer.WriteString(`" data-is-admin="`)
			hero.FormatBool(user.Admin, _buffer)
			_buffer.WriteString(`"><i class="fa fa-pencil"></i></button>
              <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#deleteModal" data-id="`)
			hero.FormatUint(uint64(user.ID), _buffer)
			_buffer.WriteString(`" data-name="`)
			hero.EscapeHTML(user.Name, _buffer)
			_buffer.WriteString(`"><i class="fa fa-trash"></i></button>
            </td>
          </tr>
          `)
		}
	}
	_buffer.WriteString(`
      </tbody>
    </table>
  </div>
  <div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="createModalLabel">新しいユーザーの作成</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <form id="create-user-validation">
          <div class="modal-body">
            <div class="form-group">
              <label for="username" class="form-control-label">ユーザー名:</label>
              <input type="text" name="username" class="form-control" id="username" required>
            </div>
            <div class="form-group">
              <label for="password" class="form-control-label">パスワード:</label>
              <input type="password" name="password" class="form-control" id="password" required>
            </div>
            <div class="form-group">
              <label for="verify-password" class="form-control-label">パスワードの再確認:</label>
              <input type="password" name="verify-password" class="form-control" id="verify-password" data-match="#password" data-match-error="Whoops, these don't match" required>
            </div>
            <div class="form-check form-check-inline">
              <label for="is-admin" class="form-check-label">
                  <input type="checkbox" name="is-admin" class="form-check-input" id="is-admin"> 管理者にする
              </label>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">閉じる</button>
            <button type="submit" id="create" class="btn btn-primary">ユーザーの作成</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editModalLabel">ユーザーの編集</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <form id="edit-user-validation">
          <div class="modal-body">
            <div class="form-group">
              <label for="username" class="form-control-label">ユーザー名:</label>
              <input type="text" class="form-control" id="username" readonly="readonly">
              <input type="hidden" class="form-control" id="user-id">
            </div>
            <div class="form-check form-check-inline">
              <label for="is-admin" class="form-check-label">
                  <input type="checkbox" name="is-admin" class="form-check-input" id="is-admin"> 管理者にする
              </label>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">閉じる</button>
            <button type="submit" id="edit" class="btn btn-primary">編集を完了する</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="deleteModalLabel">ユーザーの削除</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <form id="delete-user-validation">
            <div class="modal-body">
              <div class="form-group">
                <label for="username" class="form-control-label">ユーザー名:</label>
                <input type="text" class="form-control" id="username" readonly="readonly">
                <input type="hidden" class="form-control" id="user-id">
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">閉じる</button>
              <button type="submit" id="delete" class="btn btn-danger">削除する</button>
            </div>
          </form>
        </div>
      </div>
    </div>
</div>
`)

	_buffer.WriteString(`
  </main>
  <footer class="footer">
    <p>© `)
	hero.FormatInt(int64(args.Year()), _buffer)
	_buffer.WriteString(` <a class="text-white" href="https://twitter.com/CodeHex">CodeHex</a></p>
  </footer>
  `)
	_buffer.WriteString(`
  <script src="/assets/js/admin.js"></script>
`)

	_buffer.WriteString(`
</body>
</html>`)
	w.Write(_buffer.Bytes())

}
